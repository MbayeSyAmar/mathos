/**
 * Script pour cr√©er un utilisateur administrateur dans Firebase
 * 
 * IMPORTANT: Ce script n√©cessite Firebase Admin SDK
 * 
 * Installation:
 * npm install firebase-admin
 * 
 * Configuration:
 * 1. T√©l√©chargez votre fichier serviceAccountKey.json depuis Firebase Console
 * 2. Placez-le dans le dossier racine du projet
 * 3. Ajoutez serviceAccountKey.json √† .gitignore
 * 
 * Utilisation:
 * node scripts/create-admin.js
 */

const admin = require('firebase-admin');

// Charger le fichier de configuration
try {
  const serviceAccount = require('../serviceAccountKey.json');
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
  
  console.log('‚úÖ Firebase Admin initialis√©');
} catch (error) {
  console.error('‚ùå Erreur lors de l\'initialisation de Firebase Admin:');
  console.error('   Assurez-vous que serviceAccountKey.json existe dans le dossier racine');
  console.error('   T√©l√©chargez-le depuis: Firebase Console > Project Settings > Service Accounts');
  process.exit(1);
}

const db = admin.firestore();

/**
 * Cr√©er un utilisateur admin
 */
async function createAdmin(email, password, displayName, role = 'super_admin') {
  const validRoles = ['super_admin', 'teacher', 'tutor', 'editor'];
  
  if (!validRoles.includes(role)) {
    console.error(`‚ùå R√¥le invalide: ${role}`);
    console.error(`   R√¥les valides: ${validRoles.join(', ')}`);
    return;
  }

  try {
    console.log('\nüîÑ Cr√©ation de l\'utilisateur...');
    
    // Cr√©er l'utilisateur dans Authentication
    const userRecord = await admin.auth().createUser({
      email: email,
      password: password,
      displayName: displayName,
    });

    console.log('‚úÖ Utilisateur cr√©√© dans Authentication');
    console.log(`   UID: ${userRecord.uid}`);

    // Cr√©er le document Firestore
    await db.collection('users').doc(userRecord.uid).set({
      uid: userRecord.uid,
      displayName: displayName,
      email: email,
      photoURL: null,
      role: role,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      lastLogin: admin.firestore.FieldValue.serverTimestamp(),
      bio: '',
      level: '',
      school: '',
      interests: [],
      notifications: {
        email: true,
        newCourses: true,
        newExercises: false,
        newQuizzes: true,
        forum: true,
      },
      stats: {
        coursesCompleted: 0,
        exercisesCompleted: 0,
        quizzesCompleted: 0,
        discussionsCreated: 0,
        repliesPosted: 0,
      },
    });

    console.log('‚úÖ Document Firestore cr√©√©');
    console.log('\nüìã R√©sum√©:');
    console.log(`   Email: ${email}`);
    console.log(`   R√¥le: ${role}`);
    console.log(`   UID: ${userRecord.uid}`);
    console.log('\nüéâ Admin cr√©√© avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error.message);
    
    if (error.code === 'auth/email-already-exists') {
      console.error('   Cet email existe d√©j√†. Utilisez updateUserRole() pour changer le r√¥le.');
    }
  }
}

/**
 * Mettre √† jour le r√¥le d'un utilisateur existant
 */
async function updateUserRole(email, newRole) {
  const validRoles = ['student', 'super_admin', 'teacher', 'tutor', 'editor'];
  
  if (!validRoles.includes(newRole)) {
    console.error(`‚ùå R√¥le invalide: ${newRole}`);
    console.error(`   R√¥les valides: ${validRoles.join(', ')}`);
    return;
  }

  try {
    console.log('\nüîÑ Recherche de l\'utilisateur...');
    
    // Trouver l'utilisateur par email
    const userRecord = await admin.auth().getUserByEmail(email);
    console.log(`‚úÖ Utilisateur trouv√©: ${userRecord.uid}`);

    // Mettre √† jour le r√¥le dans Firestore
    await db.collection('users').doc(userRecord.uid).update({
      role: newRole,
    });

    console.log('‚úÖ R√¥le mis √† jour avec succ√®s');
    console.log(`   Email: ${email}`);
    console.log(`   Nouveau r√¥le: ${newRole}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error.message);
  }
}

/**
 * Lister tous les admins
 */
async function listAdmins() {
  try {
    console.log('\nüîÑ Recherche des administrateurs...\n');
    
    const snapshot = await db.collection('users')
      .where('role', 'in', ['super_admin', 'teacher', 'tutor', 'editor'])
      .get();

    if (snapshot.empty) {
      console.log('Aucun administrateur trouv√©.');
      return;
    }

    console.log(`üìã ${snapshot.size} administrateur(s) trouv√©(s):\n`);
    
    snapshot.forEach(doc => {
      const data = doc.data();
      console.log(`üë§ ${data.displayName || 'Sans nom'}`);
      console.log(`   Email: ${data.email}`);
      console.log(`   R√¥le: ${data.role}`);
      console.log(`   UID: ${data.uid}\n`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error.message);
  }
}

// ===========================================
// EXEMPLES D'UTILISATION
// ===========================================

// D√©commentez la fonction que vous voulez ex√©cuter :

// 1. Cr√©er un super administrateur
// createAdmin(
//   'admin@mathosphere.fr',
//   'SecurePassword123!',
//   'Super Admin',
//   'super_admin'
// );

// 2. Cr√©er un professeur
// createAdmin(
//   'prof@mathosphere.fr',
//   'ProfPass123!',
//   'Professeur Principal',
//   'teacher'
// );

// 3. Cr√©er un tuteur
// createAdmin(
//   'tutor@mathosphere.fr',
//   'TutorPass123!',
//   'Tuteur Principal',
//   'tutor'
// );

// 4. Cr√©er un r√©dacteur
// createAdmin(
//   'editor@mathosphere.fr',
//   'EditorPass123!',
//   'R√©dacteur Principal',
//   'editor'
// );

// 5. Mettre √† jour le r√¥le d'un utilisateur existant
// updateUserRole('user@example.com', 'teacher');

// 6. Lister tous les admins
// listAdmins();

// Message d'aide si aucune fonction n'est appel√©e
console.log('\nüìñ Guide d\'utilisation:');
console.log('\n1. Ouvrez ce fichier (scripts/create-admin.js)');
console.log('2. D√©commentez la fonction que vous voulez ex√©cuter');
console.log('3. Modifiez les param√®tres (email, mot de passe, etc.)');
console.log('4. Ex√©cutez: node scripts/create-admin.js');
console.log('\nFonctions disponibles:');
console.log('  - createAdmin()        : Cr√©er un nouvel admin');
console.log('  - updateUserRole()     : Changer le r√¥le d\'un utilisateur');
console.log('  - listAdmins()         : Lister tous les admins\n');

// Garder le script en vie si une fonction async est en cours
// setTimeout(() => {
//   console.log('Script termin√©.');
//   process.exit(0);
// }, 3000);
